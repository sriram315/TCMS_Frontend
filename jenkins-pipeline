pipeline {
    agent any

    environment {
        AWS_ACCOUNT_ID = "677043464437"
        AWS_DEFAULT_REGION = "ap-south-1"
        IMAGE_REPO_NAME = "tcms"
        IMAGE_TAG = "latest"
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
        AWS_ECR_URL = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
        EKS_CLUSTER_NAME = "TCMS"
        EC2_IP = "15.206.68.132" 
    }

    parameters {
        choice(name: 'MODE', choices: ['EC2', 'EKS'], description: 'Where to deploy the app?')
    }

    stages {

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${IMAGE_REPO_NAME}:${IMAGE_TAG}")
                }
            }
        }

        stage('Login to AWS ECR') {
            steps {
                withCredentials([[ $class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds-id' ]]) {
                    sh '''
                        aws ecr get-login-password --region $AWS_DEFAULT_REGION | \
                        docker login --username AWS --password-stdin $AWS_ECR_URL
                    '''
                }
            }
        }

        stage('Push Image to ECR') {
            steps {
                script {
                    sh """
                        docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:${IMAGE_TAG}
                        docker push ${REPOSITORY_URI}:${IMAGE_TAG}
                    """
                }
            }
        }

        stage('Deploy Based on Mode') {
            steps {
                script {
                    if (params.MODE == 'EC2') {
                        echo "▶️ Deploying to EC2..."
                        
                        // First scale down EKS
                        withCredentials([[ $class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds-id' ]]) {
                            sh """
                                aws eks update-kubeconfig --region ${AWS_DEFAULT_REGION} --name ${EKS_CLUSTER_NAME}
                                kubectl scale deployment tcms-frontend-app-deployment --replicas=0 -n hunter || true
                            """
                        }

                        // SSH to EC2 and deploy container
                        sh """
                            ssh -o StrictHostKeyChecking=no -i /path/to/key.pem ubuntu@${EC2_IP} '
                                docker pull ${REPOSITORY_URI}:${IMAGE_TAG} &&
                                docker stop frontend || true &&
                                docker rm frontend || true &&
                                docker run -d --name frontend -p 80:3000 ${REPOSITORY_URI}:${IMAGE_TAG}
                            '
                        """

                    } else if (params.MODE == 'EKS') {
                        echo "▶️ Deploying to EKS..."

                        withCredentials([[ $class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds-id' ]]) {
                            sh """
                                aws eks update-kubeconfig --region ${AWS_DEFAULT_REGION} --name ${EKS_CLUSTER_NAME}
                                
                                # Ensure namespace exists
                                kubectl get namespace hunter || kubectl create namespace hunter

                                # Apply manifest
                                kubectl apply -f hunter-frontend.yaml

                                # Scale up deployment
                                kubectl scale deployment hunter-frontend-app-deployment --replicas=2 -n hunter
                            """
                        }
                    } else {
                        error "❌ Invalid deployment mode selected."
                    }
                }
            }
        }
    }
}
