pipeline {
    agent any

    environment {
        AWS_ACCOUNT_ID = "677043464437"
        AWS_DEFAULT_REGION = "ap-south-1"
        IMAGE_REPO_NAME = "tcms"
        IMAGE_TAG = "latest"
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
        AWS_ECR_URL = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
        EKS_CLUSTER_NAME = "TCMS"
        EC2_IP = "15.206.68.132"
        K8S_NAMESPACE = "tcms"
    }

    parameters {
        choice(name: 'MODE', choices: ['EC2', 'EKS'], description: 'Where to deploy the app?')
    }

    stages {

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${IMAGE_REPO_NAME}:${IMAGE_TAG}")
                }
            }
        }

        stage('Login to AWS ECR') {
            steps {
                withCredentials([[ $class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds-id' ]]) {
                    sh '''
                        aws ecr get-login-password --region $AWS_DEFAULT_REGION | \
                        docker login --username AWS --password-stdin $AWS_ECR_URL
                    '''
                }
            }
        }

        stage('Push Image to ECR') {
            steps {
                script {
                    sh """
                        docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:${IMAGE_TAG}
                        docker push ${REPOSITORY_URI}:${IMAGE_TAG}
                    """
                }
            }
        }

       stage('Deploy Based on Mode') {
    steps {
        script {
            if (params.MODE == 'EC2') {
                echo "▶️ Deploying to EC2..."

                withCredentials([[ $class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds-id' ]]) {
                    sh """
                        aws eks update-kubeconfig --region ${AWS_DEFAULT_REGION} --name ${EKS_CLUSTER_NAME}
                        kubectl scale deployment tcms-frontend-app-deployment --replicas=0 -n ${K8S_NAMESPACE} || true

                        # Scale EKS nodes down to 0
                        aws eks update-nodegroup-config \
                            --cluster-name ${EKS_CLUSTER_NAME} \
                            --nodegroup-name <YOUR_NODEGROUP_NAME> \
                            --scaling-config minSize=0,maxSize=2,desiredSize=0
                    """
                }

                sh """
ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/key.pem ubuntu@${EC2_IP} << 'ENDSSH'
    aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ECR_URL}
    docker pull ${REPOSITORY_URI}:${IMAGE_TAG}
    docker stop frontend || true
    docker rm frontend || true
    docker run -d --name frontend -p 80:3000 ${REPOSITORY_URI}:${IMAGE_TAG}
ENDSSH
                """

            } else if (params.MODE == 'EKS') {
                echo "▶️ Deploying to EKS..."

                withCredentials([[ $class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds-id' ]]) {
                    sh """
                        aws eks update-kubeconfig --region ${AWS_DEFAULT_REGION} --name ${EKS_CLUSTER_NAME}

                        # Scale EKS nodes up if needed
                        aws eks update-nodegroup-config \
                            --cluster-name ${EKS_CLUSTER_NAME} \
                            --nodegroup-name <YOUR_NODEGROUP_NAME> \
                            --scaling-config minSize=1,maxSize=2,desiredSize=1

                        # Ensure namespace exists
                        kubectl get namespace ${K8S_NAMESPACE} || kubectl create namespace ${K8S_NAMESPACE}

                        # Apply Kubernetes manifest
                        kubectl apply -f tcms-frontend.yaml -n ${K8S_NAMESPACE}

                        # Scale up deployment
                        kubectl scale deployment tcms-frontend-app-deployment --replicas=2 -n ${K8S_NAMESPACE}
                    """
                }
            } else {
                error "❌ Invalid deployment mode selected."
            }
        }
    }
}

    }
}
